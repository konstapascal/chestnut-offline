{"version":3,"sources":["images/chestnut.png","components/Tooltips/TooltipSchemas.js","context/selected-key-context.js","components/MyKeysList.js","components/Tooltips/EncryptionTooltip.js","components/RsaEncryption.js","components/Tooltips/DecryptionTooltip.js","components/RsaDecryption.js","components/Tooltips/SigningTooltip.js","components/RsaSigning.js","components/Tooltips/VerifyingTooltip.js","components/RsaVerifying.js","components/Tooltips/AsymmetricTooltip.js","components/Pages/AsymmetricSubpage.js","components/AesEncryption.js","components/AesDecryption.js","components/Tooltips/RotTooltip.js","components/Rot13.js","components/Tooltips/SymmetricTooltip.js","components/Pages/SymmetricSubpage.js","components/Tooltips/Base64Tooltip.js","components/Base64Encoding.js","components/Base64Decoding.js","components/Tooltips/UuidTooltip.js","components/UUIDGenerator.js","components/Tooltips/ChecksumTooltip.js","components/Checksum.js","components/Pages/UtilitiesSubpage.js","components/Pages/ApplicationPage.js","components/GenerateKey.js","components/Pages/KeysPage.js","components/Navbar.js","components/Pages/HomePage.js","components/Pages/ErrorPage.js","App.js","index.js"],"names":["module","exports","BasicTooltip","props","animation","arrow","delay","theme","SelectedKeyContext","createContext","MyKeysList","refreshKeys","useContext","selectedKey","setSelectedKey","useState","loadedKeys","setLoadedPublicKeys","modalOpen","setModalOpen","Name","setActiveKey","handleDeleteModalClose","location","useLocation","history","useHistory","useEffect","storageKeys","JSON","parse","localStorage","getItem","setItem","stringify","toKeysPage","push","listPanes","menuItem","Menu","Item","render","Tab","Pane","List","divided","relaxed","length","Message","style","textAlign","Icon","name","size","verticalAlign","pathname","onClick","map","item","key","KeypairID","ID","background","padding","cursor","borderRadius","Content","publicKey","privateKey","PublicKey","PrivateKey","handleActiveKey","Header","Description","Length","moment","createdAt","local","format","Modal","trigger","floated","negative","modalID","open","onClose","closeIcon","icon","color","content","Actions","Button","panes","defaultActiveIndex","EncryptionTooltip","Label","basic","as","marginBottom","borderColor","RsaEncryption","userInput","setUserInput","rsaEncrypted","setRsaEncrypted","error","setError","success","setSuccess","margin","Form","TextArea","spellCheck","placeholder","minHeight","onChange","e","target","value","readOnly","backgroundColor","visible","DecryptionTooltip","RsaDecryption","rsaDecrypted","setRsaDecrypted","decryptText","onSubmit","forge","require","RsaSigning","setMdData","signature","setSignature","SigningTooltip","pemPrivKey","privKey","pki","privateKeyFromPem","md","sha256","create","update","mdData","digest","bytes","util","encode64","sign","encodedSignature","VerifyingTooltip","RsaVerifying","undefined","pemPubKey","pubKey","publicKeyFromPem","decodedMdData","decode64","decodedSignature","verify","AsymmetricTooltip","AsymmetricSubpage","AsymmetricOptions","warning","AesEncryption","aesEncrypted","setAesEncrypted","userPassword","setUserPassword","exampleString","password","pkcs5","pbkdf2","cipher","createCipher","start","iv","createBuffer","finish","encrypted","output","data","encrypt","Input","label","type","flucid","AesDecryption","aesDecrypted","setAesDecrypted","tag","mode","decipher","createDecipher","decrypted","RotTooltip","Rot13","rotData","setRotData","newRotData","replace","char","String","fromCharCode","charCodeAt","SymmetricTooltip","SymmetricSubpage","SymmetricOptions","Base64Tooltip","Base64Encoding","base64Encoded","setBase64Encoded","newBase64Encoded","Base64Decoding","base64Decoded","setBase64Decoded","newBase64Decoded","UuidTooltip","UuidGenerator","generatedUuids","setGeneratedUuids","number","setNumber","errorMessage","setErrorMessage","fluid","focus","uuids","index","uuidGen","uuid","marginTop","ChecksumTooltip","Checksum","md5Hash","setMD5Hash","sha1Hash","setSHA1Hash","sha256Hash","setSHA256","sha512Hash","setSHA512","md5Hasher","md5","toHex","sha1Hasher","sha1","sha256Hasher","sha512Hasher","sha512","accept","reader","FileReader","onload","result","readAsBinaryString","files","UtilitiesSubpage","UtilitiesOptions","UUIDGenerator","ApplicationPage","appSubpages","Grid","stackable","columns","Column","width","minWidth","typeOptions","text","lengthOptions","GenerateKey","handleRefresh","keyName","setKeyName","keyLength","setKeyLength","statusMessage","setStatusMessage","isLoading","generateKey","keypair","rsa","generateKeyPair","bits","publicKeyToPem","privateKeyToPem","Segment","maxWidth","dividing","Field","paddingBottom","id","Select","defaultValue","options","disabled","positive","KeysPage","setRefreshKeys","paddingLeft","paddingRight","Navbar","activeItem","setActiveItem","handleItemClick","inverted","attached","Link","to","src","logo","alt","NavLink","exact","active","marginRight","HomePage","ErrorPage","match","console","log","params","queryParam","App","defaultSelectedKeyValues","Provider","path","component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.4d182402.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chestnut.1a8f3e3e.png\";","import React from 'react';\r\nimport Tippy from '@tippy.js/react';\r\nimport 'tippy.js/dist/tippy.css';\r\nimport 'tippy.js/themes/light.css';\r\n\r\nconst BasicTooltip = props => {\r\n\treturn (\r\n\t\t<Tippy\r\n\t\t\tanimation='fade'\r\n\t\t\tarrow={false}\r\n\t\t\tdelay={150}\r\n\t\t\ttheme='light'\r\n\t\t\t{...props}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nconst InfoTooltip = props => {\r\n\treturn (\r\n\t\t<Tippy\r\n\t\t\tanimation='fade'\r\n\t\t\tarrow={true}\r\n\t\t\tdelay={150}\r\n\t\t\ttheme='light'\r\n\t\t\ttrigger='click'\r\n\t\t\t{...props}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport { BasicTooltip, InfoTooltip };\r\n","import { createContext } from 'react';\r\n\r\nexport const SelectedKeyContext = createContext();\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport {\r\n\tMenu,\r\n\tList,\r\n\tTab,\r\n\tIcon,\r\n\tButton,\r\n\tModal,\r\n\tHeader,\r\n\tMessage\r\n} from 'semantic-ui-react';\r\nimport { Link, useHistory, useLocation } from 'react-router-dom';\r\nimport moment from 'moment';\r\nimport KeysWarningTooltip from './Tooltips/KeysWarningTooltip';\r\n\r\nimport { SelectedKeyContext } from '../context/selected-key-context';\r\n\r\nconst MyKeysList = ({ refreshKeys }) => {\r\n\tconst { selectedKey, setSelectedKey } = useContext(SelectedKeyContext);\r\n\r\n\tconst [loadedKeys, setLoadedKeys] = useState([]);\r\n\tconst [loadedPublicKeys, setLoadedPublicKeys] = useState([]);\r\n\tconst [modalOpen, setModalOpen] = useState(false);\r\n\tconst [activeKey, setActiveKey] = useState(selectedKey.Name);\r\n\r\n\tconst handleDeleteModalOpen = modalID => setModalOpen(modalID);\r\n\tconst handleDeleteModalClose = () => setModalOpen(false);\r\n\r\n\tconst location = useLocation();\r\n\tconst history = useHistory();\r\n\r\n\tconst handleActiveKey = (ID, Name, publicKey, privateKey = '') => {\r\n\t\tsetActiveKey(ID);\r\n\t\tsetSelectedKey({\r\n\t\t\tID: ID,\r\n\t\t\tName: Name,\r\n\t\t\tPublicKey: publicKey,\r\n\t\t\tPrivateKey: privateKey\r\n\t\t});\r\n\t};\r\n\r\n\t// GET all my keys request\r\n\tconst fetchMyKeys = () => {\r\n\t\t// TODO: fetch keys from localStorage\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tfetchMyKeys();\r\n\t}, [refreshKeys]);\r\n\r\n\t// Get saved public keys from localstorage\r\n\tuseEffect(() => {\r\n\t\tconst storageKeys = JSON.parse(localStorage.getItem('addedPublicKeys'));\r\n\r\n\t\tif (storageKeys === null) {\r\n\t\t\t// Make new local storage field if there isn't one\r\n\t\t\treturn localStorage.setItem('addedPublicKeys', JSON.stringify([]));\r\n\t\t} else {\r\n\t\t\t// If there is local storage data, add it to state\r\n\t\t\tsetLoadedPublicKeys(storageKeys);\r\n\t\t}\r\n\t}, []);\r\n\r\n\t// DELETE a key request\r\n\tconst deleteKey = (KeypairID, KeypairName) => {\r\n\t\t// If the key being deleted is already selected by the user, unselect it.\r\n\t\tif (KeypairName === selectedKey.Name) {\r\n\t\t\tsetSelectedKey({\r\n\t\t\t\tPublicKey: '',\r\n\t\t\t\tPrivateKey: '',\r\n\t\t\t\tName: ''\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// TODO: delete key from localStorage\r\n\t};\r\n\r\n\t// Remove public key from list and local storage\r\n\tconst removePublicKey = (KeypairID, KeypairName) => {\r\n\t\t// If the public key being removed is already selected, unselect it.\r\n\t\tif (KeypairName === selectedKey.Name) {\r\n\t\t\tsetSelectedKey({\r\n\t\t\t\tPublicKey: '',\r\n\t\t\t\tPrivateKey: '',\r\n\t\t\t\tName: ''\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tconst newLoadedPublicKeys = loadedPublicKeys.filter(\r\n\t\t\tkey => key.ID !== KeypairID\r\n\t\t);\r\n\r\n\t\tsetLoadedPublicKeys(newLoadedPublicKeys);\r\n\t\tlocalStorage.setItem(\r\n\t\t\t'addedPublicKeys',\r\n\t\t\tJSON.stringify(newLoadedPublicKeys)\r\n\t\t);\r\n\t};\r\n\r\n\tconst toKeysPage = () => {\r\n\t\tsetSelectedKey('');\r\n\t\thistory.push('/keys');\r\n\t};\r\n\r\n\tconst listPanes = [\r\n\t\t{\r\n\t\t\tmenuItem: <Menu.Item>My Keypairs</Menu.Item>,\r\n\t\t\trender: () => (\r\n\t\t\t\t<Tab.Pane>\r\n\t\t\t\t\t<List divided relaxed>\r\n\t\t\t\t\t\t{loadedKeys.length === 0 && (\r\n\t\t\t\t\t\t\t<Message style={{ textAlign: 'center' }}>\r\n\t\t\t\t\t\t\t\t<Icon name='key' size='large' verticalAlign='middle' />\r\n\t\t\t\t\t\t\t\tNo keypairs.\r\n\t\t\t\t\t\t\t\t{location.pathname === '/' && (\r\n\t\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t\t{' '}\r\n\t\t\t\t\t\t\t\t\t\tClick{' '}\r\n\t\t\t\t\t\t\t\t\t\t<Link onClick={() => toKeysPage()}>here</Link> to\r\n\t\t\t\t\t\t\t\t\t\tmake one.\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</Message>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t{loadedKeys.map(item => (\r\n\t\t\t\t\t\t\t<List.Item\r\n\t\t\t\t\t\t\t\tkey={item.KeypairID}\r\n\t\t\t\t\t\t\t\tstyle={\r\n\t\t\t\t\t\t\t\t\tselectedKey.ID === item.KeypairID\r\n\t\t\t\t\t\t\t\t\t\t? {\r\n\t\t\t\t\t\t\t\t\t\t\t\tbackground: '#c4edcd',\r\n\t\t\t\t\t\t\t\t\t\t\t\tpadding: '.5rem',\r\n\t\t\t\t\t\t\t\t\t\t\t\tcursor: 'pointer',\r\n\t\t\t\t\t\t\t\t\t\t\t\tborderRadius: '.5rem'\r\n\t\t\t\t\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t\t\t\t\t: { padding: '.5rem', cursor: 'pointer' }\r\n\t\t\t\t\t\t\t\t}>\r\n\t\t\t\t\t\t\t\t<List.Icon\r\n\t\t\t\t\t\t\t\t\tname='key'\r\n\t\t\t\t\t\t\t\t\tsize='large'\r\n\t\t\t\t\t\t\t\t\tverticalAlign='middle'\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<List.Content\r\n\t\t\t\t\t\t\t\t\tonClick={() =>\r\n\t\t\t\t\t\t\t\t\t\thandleActiveKey(\r\n\t\t\t\t\t\t\t\t\t\t\titem.KeypairID,\r\n\t\t\t\t\t\t\t\t\t\t\titem.Name,\r\n\t\t\t\t\t\t\t\t\t\t\titem.PublicKey,\r\n\t\t\t\t\t\t\t\t\t\t\titem.PrivateKey\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t}>\r\n\t\t\t\t\t\t\t\t\t<List.Header>{item.Name}</List.Header>\r\n\t\t\t\t\t\t\t\t\t<List.Description>\r\n\t\t\t\t\t\t\t\t\t\tLength: {item.Length}\r\n\t\t\t\t\t\t\t\t\t</List.Description>\r\n\t\t\t\t\t\t\t\t\t<List.Description>\r\n\t\t\t\t\t\t\t\t\t\tCreated:{' '}\r\n\t\t\t\t\t\t\t\t\t\t{moment(item.createdAt)\r\n\t\t\t\t\t\t\t\t\t\t\t.local()\r\n\t\t\t\t\t\t\t\t\t\t\t.format('DD MMM YYYY, HH:mm')}\r\n\t\t\t\t\t\t\t\t\t</List.Description>\r\n\t\t\t\t\t\t\t\t</List.Content>\r\n\r\n\t\t\t\t\t\t\t\t{location.pathname === '/keys' && (\r\n\t\t\t\t\t\t\t\t\t<Modal\r\n\t\t\t\t\t\t\t\t\t\ttrigger={\r\n\t\t\t\t\t\t\t\t\t\t\t<List.Icon\r\n\t\t\t\t\t\t\t\t\t\t\t\tname='trash alternate outline'\r\n\t\t\t\t\t\t\t\t\t\t\t\tsize='large'\r\n\t\t\t\t\t\t\t\t\t\t\t\tfloated='right'\r\n\t\t\t\t\t\t\t\t\t\t\t\tverticalAlign='middle'\r\n\t\t\t\t\t\t\t\t\t\t\t\tnegative\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\thandleDeleteModalOpen(item.KeypairID)\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tsize='tiny'\r\n\t\t\t\t\t\t\t\t\t\topen={modalOpen === item.KeypairID}\r\n\t\t\t\t\t\t\t\t\t\tonClose={handleDeleteModalClose}\r\n\t\t\t\t\t\t\t\t\t\tcloseIcon>\r\n\t\t\t\t\t\t\t\t\t\t<Header\r\n\t\t\t\t\t\t\t\t\t\t\ticon='warning sign'\r\n\t\t\t\t\t\t\t\t\t\t\tcolor='red'\r\n\t\t\t\t\t\t\t\t\t\t\tcontent='Delete key?'\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t<Modal.Content>\r\n\t\t\t\t\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\t\t\t\t\tAre you sure you want to delete{' '}\r\n\t\t\t\t\t\t\t\t\t\t\t\t<b>{item.Name}</b>?\r\n\t\t\t\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t\t\t\t</Modal.Content>\r\n\t\t\t\t\t\t\t\t\t\t<Modal.Actions>\r\n\t\t\t\t\t\t\t\t\t\t\t<Button onClick={handleDeleteModalClose}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Icon name='remove' /> Cancel\r\n\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\t\t\tcolor='red'\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeleteKey(item.KeypairID, item.Name)\r\n\t\t\t\t\t\t\t\t\t\t\t\t}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Icon name='checkmark' />\r\n\t\t\t\t\t\t\t\t\t\t\t\tDelete\r\n\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t</Modal.Actions>\r\n\t\t\t\t\t\t\t\t\t</Modal>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</List.Item>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t{loadedKeys.length !== 0 && location.pathname === '/' && (\r\n\t\t\t\t\t\t\t<Message style={{ textAlign: 'center' }}>\r\n\t\t\t\t\t\t\t\tClick <Link onClick={() => toKeysPage()}>here</Link> to\r\n\t\t\t\t\t\t\t\tcreate more keys.\r\n\t\t\t\t\t\t\t</Message>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</List>\r\n\t\t\t\t</Tab.Pane>\r\n\t\t\t)\r\n\t\t}\r\n\t];\r\n\r\n\treturn (\r\n\t\t<Tab\r\n\t\t\tpanes={listPanes}\r\n\t\t\tdefaultActiveIndex={\r\n\t\t\t\tselectedKey.PublicKey && !selectedKey.PrivateKey ? 1 : 0\r\n\t\t\t}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default MyKeysList;\r\n","import React from 'react';\r\nimport { Label } from 'semantic-ui-react';\r\nimport { BasicTooltip } from './TooltipSchemas';\r\n\r\nconst EncryptionTooltip = () => {\r\n\treturn (\r\n\t\t<BasicTooltip\r\n\t\t\tcontent={\r\n\t\t\t\t<div\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\ttextAlign: 'center',\r\n\t\t\t\t\t\tpadding: '1rem'\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tThis process converts the original representation of the\r\n\t\t\t\t\t\tinformation, known as <b>plaintext</b>, into an alternative\r\n\t\t\t\t\t\tform known as <b>ciphertext</b>.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t}>\r\n\t\t\t<span>\r\n\t\t\t\t<Label\r\n\t\t\t\t\tbasic\r\n\t\t\t\t\tsize='large'\r\n\t\t\t\t\tas='a'\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tmarginBottom: '1.5rem',\r\n\t\t\t\t\t\tcolor: '#14872f',\r\n\t\t\t\t\t\tborderColor: '#14872f'\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\tWhat is encryption?\r\n\t\t\t\t</Label>\r\n\t\t\t</span>\r\n\t\t</BasicTooltip>\r\n\t);\r\n};\r\n\r\nexport default EncryptionTooltip;\r\n","import React, { useState, useContext } from 'react';\r\nimport { Form, Message, Icon, Label } from 'semantic-ui-react';\r\nimport axios from 'axios';\r\n\r\nimport { SelectedKeyContext } from '../context/selected-key-context';\r\nimport EncryptionTooltip from './Tooltips/EncryptionTooltip';\r\n\r\nconst RsaEncryption = () => {\r\n\tconst { selectedKey } = useContext(SelectedKeyContext);\r\n\r\n\tconst [userInput, setUserInput] = useState('');\r\n\tconst [rsaEncrypted, setRsaEncrypted] = useState('');\r\n\tconst [error, setError] = useState('');\r\n\tconst [success, setSuccess] = useState('');\r\n\r\n\tconst encryptText = () => {\r\n\t\tsetError('');\r\n\t\tsetSuccess('');\r\n\t\tsetRsaEncrypted('');\r\n\r\n\t\tconst pubKey = selectedKey.PublicKey;\r\n\r\n\t\tif (userInput === '') {\r\n\t\t\tsetError('Your field cannot be empty!');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// TODO: enxrypt RSA text\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div style={{ margin: '1.5rem' }}>\r\n\t\t\t<EncryptionTooltip />\r\n\t\t\t<p>\r\n\t\t\t\tSelected key: <b>{selectedKey.Name ? selectedKey.Name : 'None'}</b>\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\tWrite plain text in the first area and it will be encrypted using\r\n\t\t\t\tyour selected keypairs public key.\r\n\t\t\t</p>\r\n\r\n\t\t\t<Form>\r\n\t\t\t\t<Form.TextArea\r\n\t\t\t\t\tspellCheck={false}\r\n\t\t\t\t\tplaceholder='Write or paste your text here...'\r\n\t\t\t\t\tstyle={{ minHeight: 100 }}\r\n\t\t\t\t\tonChange={e => setUserInput(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.TextArea\r\n\t\t\t\t\tspellCheck={false}\r\n\t\t\t\t\treadOnly\r\n\t\t\t\t\tplaceholder='Ecrypted text appears here...'\r\n\t\t\t\t\tstyle={{ minHeight: 100 }}\r\n\t\t\t\t\tvalue={rsaEncrypted}\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.Button\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tbackgroundColor: '#14872f'\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tonClick={encryptText}>\r\n\t\t\t\t\t<p style={{ color: '#FFF' }}>Encrypt</p>\r\n\t\t\t\t</Form.Button>\r\n\t\t\t\t{error && (\r\n\t\t\t\t\t<Message error visible>\r\n\t\t\t\t\t\t<Icon color='red' name='times' size='large' />\r\n\t\t\t\t\t\t{error}\r\n\t\t\t\t\t</Message>\r\n\t\t\t\t)}\r\n\t\t\t\t{success && (\r\n\t\t\t\t\t<Message success visible>\r\n\t\t\t\t\t\t<Icon color='green' name='checkmark' size='large' />\r\n\t\t\t\t\t\t{success}\r\n\t\t\t\t\t</Message>\r\n\t\t\t\t)}\r\n\t\t\t</Form>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default RsaEncryption;\r\n","import React from 'react';\r\nimport { Label } from 'semantic-ui-react';\r\nimport { BasicTooltip } from './TooltipSchemas';\r\n\r\nconst DecryptionTooltip = () => {\r\n\treturn (\r\n\t\t<BasicTooltip\r\n\t\t\tcontent={\r\n\t\t\t\t<div\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\ttextAlign: 'center',\r\n\t\t\t\t\t\tpadding: '1rem'\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tThe conversion of encrypted data into its original form is\r\n\t\t\t\t\t\tcalled <b>decryption</b>.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tIt is generally a reverse process of encryption that requires\r\n\t\t\t\t\t\ta <b>secret key</b> or <b>password</b>.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t}>\r\n\t\t\t<span>\r\n\t\t\t\t<Label\r\n\t\t\t\t\tbasic\r\n\t\t\t\t\tsize='large'\r\n\t\t\t\t\tas='a'\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tmarginBottom: '1.5rem',\r\n\t\t\t\t\t\tcolor: '#14872f',\r\n\t\t\t\t\t\tborderColor: '#14872f'\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\tWhat is decryption?\r\n\t\t\t\t</Label>\r\n\t\t\t</span>\r\n\t\t</BasicTooltip>\r\n\t);\r\n};\r\n\r\nexport default DecryptionTooltip;\r\n","import React, { useState, useContext } from 'react';\r\nimport { Form, Message, Icon, Label } from 'semantic-ui-react';\r\nimport axios from 'axios';\r\nimport DecryptionTooltip from './Tooltips/DecryptionTooltip';\r\n\r\nimport { SelectedKeyContext } from '../context/selected-key-context';\r\n\r\nconst RsaDecryption = () => {\r\n\tconst { selectedKey } = useContext(SelectedKeyContext);\r\n\r\n\tconst [userInput, setUserInput] = useState('');\r\n\tconst [rsaDecrypted, setRsaDecrypted] = useState('');\r\n\tconst [error, setError] = useState('');\r\n\tconst [success, setSuccess] = useState('');\r\n\r\n\tconst decryptText = () => {\r\n\t\tsetError('');\r\n\t\tsetSuccess('');\r\n\t\tsetRsaDecrypted('');\r\n\r\n\t\tconst privKey = selectedKey.PrivateKey;\r\n\r\n\t\tif (userInput === '') {\r\n\t\t\tsetError('Your field cannot be empty!');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// TODO: decrypt RSA text\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div style={{ margin: '1.5rem' }}>\r\n\t\t\t<DecryptionTooltip />\r\n\t\t\t<p>\r\n\t\t\t\tSelected key: <b>{selectedKey.Name ? selectedKey.Name : 'None'}</b>\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\tPaste in your encrypted text in the first area and it will be\r\n\t\t\t\tdecrypted using your selected key.\r\n\t\t\t</p>\r\n\t\t\t<Form onSubmit={decryptText}>\r\n\t\t\t\t<Form.TextArea\r\n\t\t\t\t\tspellCheck={false}\r\n\t\t\t\t\tplaceholder='Write or paste your encrypted text here...'\r\n\t\t\t\t\tstyle={{ minHeight: 100 }}\r\n\t\t\t\t\tonChange={e => setUserInput(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.TextArea\r\n\t\t\t\t\treadOnly\r\n\t\t\t\t\tplaceholder='Plain text appears here...'\r\n\t\t\t\t\tstyle={{ minHeight: 100 }}\r\n\t\t\t\t\tvalue={rsaDecrypted}\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.Button\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tbackgroundColor: '#14872f'\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tonClick={decryptText}>\r\n\t\t\t\t\t<p style={{ color: '#FFF' }}>Decrypt</p>\r\n\t\t\t\t</Form.Button>\r\n\t\t\t\t{error && (\r\n\t\t\t\t\t<Message error visible>\r\n\t\t\t\t\t\t<Icon color='red' name='times' size='large' />\r\n\t\t\t\t\t\t{error}\r\n\t\t\t\t\t</Message>\r\n\t\t\t\t)}\r\n\t\t\t\t{success && (\r\n\t\t\t\t\t<Message success visible>\r\n\t\t\t\t\t\t<Icon color='green' name='checkmark' size='large' />\r\n\t\t\t\t\t\t{success}\r\n\t\t\t\t\t</Message>\r\n\t\t\t\t)}\r\n\t\t\t</Form>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default RsaDecryption;\r\n","import React from 'react';\r\nimport { Label } from 'semantic-ui-react';\r\nimport { BasicTooltip } from './TooltipSchemas';\r\n\r\nconst EncryptionTooltip = () => {\r\n\treturn (\r\n\t\t<BasicTooltip\r\n\t\t\tcontent={\r\n\t\t\t\t<div\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\ttextAlign: 'center',\r\n\t\t\t\t\t\tpadding: '1rem'\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tA <b>digital signature</b> is a mathematical technique used to\r\n\t\t\t\t\t\tvalidate the authenticity and integrity of a message, software\r\n\t\t\t\t\t\tor digital document.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t<b>RSA signature</b> is a type of digital signature, which\r\n\t\t\t\t\t\tuses the RSA asymmetric key algorithm.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t}>\r\n\t\t\t<span>\r\n\t\t\t\t<Label\r\n\t\t\t\t\tbasic\r\n\t\t\t\t\tsize='large'\r\n\t\t\t\t\tas='a'\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tmarginBottom: '1.5rem',\r\n\t\t\t\t\t\tcolor: '#14872f',\r\n\t\t\t\t\t\tborderColor: '#14872f'\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\tWhat is a signature?\r\n\t\t\t\t</Label>\r\n\t\t\t</span>\r\n\t\t</BasicTooltip>\r\n\t);\r\n};\r\n\r\nexport default EncryptionTooltip;\r\n","import React, { useState, useContext } from 'react';\r\nimport { Form, Message, Icon } from 'semantic-ui-react';\r\nimport SigningTooltip from './Tooltips/SigningTooltip';\r\n\r\nimport { SelectedKeyContext } from '../context/selected-key-context';\r\n\r\nconst forge = require('node-forge');\r\n\r\nconst RsaSigning = ({ setMdData }) => {\r\n\tconst { selectedKey } = useContext(SelectedKeyContext);\r\n\r\n\tconst [userInput, setUserInput] = useState('');\r\n\tconst [signature, setSignature] = useState('');\r\n\tconst [error, setError] = useState('');\r\n\tconst [success, setSuccess] = useState('');\r\n\r\n\tconst signText = () => {\r\n\t\tsetError('');\r\n\t\tsetSuccess('');\r\n\t\tsetSignature('');\r\n\r\n\t\tif (userInput === '') {\r\n\t\t\treturn setError('Your field cannot be empty!');\r\n\t\t}\r\n\r\n\t\tconst pemPrivKey = selectedKey.PrivateKey;\r\n\t\tconst privKey = forge.pki.privateKeyFromPem(pemPrivKey);\r\n\r\n\t\tconst md = forge.md.sha256.create();\r\n\t\tmd.update(userInput);\r\n\t\tconst mdData = md.digest().bytes();\r\n\r\n\t\t// Storing md in the parent component\r\n\t\tsetMdData(forge.util.encode64(mdData));\r\n\r\n\t\tconst signature = privKey.sign(md);\r\n\t\tconst encodedSignature = forge.util.encode64(signature);\r\n\r\n\t\tsetSignature(encodedSignature);\r\n\t\tsetSuccess(\r\n\t\t\t`Your text has been signed successfully using ${selectedKey.Name}.`\r\n\t\t);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div style={{ margin: '1.5rem' }}>\r\n\t\t\t<SigningTooltip />\r\n\t\t\t<p>\r\n\t\t\t\tSelected key: <b>{selectedKey.Name ? selectedKey.Name : 'None'}</b>\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\tWrite plain text in the first area and it will be signed using your\r\n\t\t\t\tselected keypairs private key.\r\n\t\t\t</p>\r\n\r\n\t\t\t<Form>\r\n\t\t\t\t<Form.TextArea\r\n\t\t\t\t\tspellCheck={false}\r\n\t\t\t\t\tplaceholder='Write or paste your text here...'\r\n\t\t\t\t\tstyle={{ minHeight: 100 }}\r\n\t\t\t\t\tonChange={e => setUserInput(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.TextArea\r\n\t\t\t\t\tspellCheck={false}\r\n\t\t\t\t\treadOnly\r\n\t\t\t\t\tplaceholder='Signature appears here...'\r\n\t\t\t\t\tstyle={{ minHeight: 100 }}\r\n\t\t\t\t\tvalue={signature}\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.Button\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tbackgroundColor: '#14872f'\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tonClick={signText}>\r\n\t\t\t\t\t<p style={{ color: '#FFF' }}>Sign</p>\r\n\t\t\t\t</Form.Button>\r\n\t\t\t\t{error && (\r\n\t\t\t\t\t<Message error visible>\r\n\t\t\t\t\t\t<Icon color='red' name='times' size='large' />\r\n\t\t\t\t\t\t{error}\r\n\t\t\t\t\t</Message>\r\n\t\t\t\t)}\r\n\t\t\t\t{success && (\r\n\t\t\t\t\t<Message success visible>\r\n\t\t\t\t\t\t<Icon color='green' name='checkmark' size='large' />\r\n\t\t\t\t\t\t{success}\r\n\t\t\t\t\t</Message>\r\n\t\t\t\t)}\r\n\t\t\t</Form>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default RsaSigning;\r\n","import React from 'react';\r\nimport { Label } from 'semantic-ui-react';\r\nimport { BasicTooltip } from './TooltipSchemas';\r\n\r\nconst VerifyingTooltip = () => {\r\n\treturn (\r\n\t\t<BasicTooltip\r\n\t\t\tcontent={\r\n\t\t\t\t<div\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\ttextAlign: 'center',\r\n\t\t\t\t\t\tpadding: '1rem'\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t<b>Verifying</b> a signature means to check the signature\r\n\t\t\t\t\t\tvalidity and whether any changes have been made to the message\r\n\t\t\t\t\t\tor document since it was signed.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t}>\r\n\t\t\t<span>\r\n\t\t\t\t<Label\r\n\t\t\t\t\tbasic\r\n\t\t\t\t\tsize='large'\r\n\t\t\t\t\tas='a'\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tmarginBottom: '1.5rem',\r\n\t\t\t\t\t\tcolor: '#14872f',\r\n\t\t\t\t\t\tborderColor: '#14872f'\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\tWhat is the verification process?\r\n\t\t\t\t</Label>\r\n\t\t\t</span>\r\n\t\t</BasicTooltip>\r\n\t);\r\n};\r\n\r\nexport default VerifyingTooltip;\r\n","import React, { useContext, useState } from 'react';\r\nimport { Form, Message, Icon } from 'semantic-ui-react';\r\nimport VerifyingTooltip from './Tooltips/VerifyingTooltip';\r\n\r\nimport { SelectedKeyContext } from '../context/selected-key-context';\r\n\r\nconst forge = require('node-forge');\r\n\r\nconst RsaVerifying = ({ mdData }) => {\r\n\tconst { selectedKey } = useContext(SelectedKeyContext);\r\n\r\n\tconst [signature, setSignature] = useState('');\r\n\tconst [error, setError] = useState('');\r\n\tconst [success, setSuccess] = useState('');\r\n\r\n\tconst verifySignature = () => {\r\n\t\tsetError('');\r\n\t\tsetSuccess('');\r\n\r\n\t\tif (signature === '') {\r\n\t\t\treturn setError('Your field cannot be empty!');\r\n\t\t}\r\n\r\n\t\tif (mdData === undefined) {\r\n\t\t\treturn setError(\r\n\t\t\t\t'Hash was not found. Sign your text and come back to try again.'\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tconst pemPubKey = selectedKey.PublicKey;\r\n\t\tconst pubKey = forge.pki.publicKeyFromPem(pemPubKey);\r\n\r\n\t\tconst decodedMdData = forge.util.decode64(mdData);\r\n\t\tconst decodedSignature = forge.util.decode64(signature);\r\n\r\n\t\ttry {\r\n\t\t\tpubKey.verify(decodedMdData, decodedSignature);\r\n\t\t\tsetSuccess(`Signature was verified using ${selectedKey.Name}.`);\r\n\t\t} catch {\r\n\t\t\tsetError(`Signature could not be verified using ${selectedKey.Name}.`);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div style={{ margin: '1.5rem' }}>\r\n\t\t\t<VerifyingTooltip />\r\n\t\t\t<p>\r\n\t\t\t\tSelected key: <b>{selectedKey.Name ? selectedKey.Name : 'None'}</b>\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\tPaste in your signature in the text area and it will be verified\r\n\t\t\t\tusing the selected public key.\r\n\t\t\t</p>\r\n\r\n\t\t\t<Form>\r\n\t\t\t\t<Form.TextArea\r\n\t\t\t\t\tspellCheck={false}\r\n\t\t\t\t\tplaceholder='Write or paste your signature here...'\r\n\t\t\t\t\tstyle={{ minHeight: 100 }}\r\n\t\t\t\t\tonChange={e => setSignature(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.Button\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tbackgroundColor: '#14872f'\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tonClick={verifySignature}>\r\n\t\t\t\t\t<p style={{ color: '#FFF' }}>Verify</p>\r\n\t\t\t\t</Form.Button>\r\n\r\n\t\t\t\t{error && (\r\n\t\t\t\t\t<Message error visible>\r\n\t\t\t\t\t\t<Icon color='red' name='times' size='large' />\r\n\t\t\t\t\t\t{error}\r\n\t\t\t\t\t</Message>\r\n\t\t\t\t)}\r\n\t\t\t\t{success && (\r\n\t\t\t\t\t<Message success visible>\r\n\t\t\t\t\t\t<Icon color='green' name='checkmark' size='large' />\r\n\t\t\t\t\t\t{success}\r\n\t\t\t\t\t</Message>\r\n\t\t\t\t)}\r\n\t\t\t</Form>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default RsaVerifying;\r\n","import React from 'react';\r\nimport { Label } from 'semantic-ui-react';\r\nimport { BasicTooltip } from './TooltipSchemas';\r\n\r\nconst AsymmetricTooltip = () => {\r\n\treturn (\r\n\t\t<BasicTooltip\r\n\t\t\tcontent={\r\n\t\t\t\t<div\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\ttextAlign: 'center',\r\n\t\t\t\t\t\tpadding: '1rem'\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t<b>Asymmetric Encryption</b> is a form of encryption where\r\n\t\t\t\t\t\tkeys come in <b>pairs</b>. What one key encrypts, only the\r\n\t\t\t\t\t\tother can decrypt.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tThis is also known as <b>Public Key Cryptography</b>, since\r\n\t\t\t\t\t\tusers typically create a matching key pair, and make one\r\n\t\t\t\t\t\tpublic while keeping the other secret.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t}>\r\n\t\t\t<span>\r\n\t\t\t\t<Label\r\n\t\t\t\t\tbasic\r\n\t\t\t\t\tsize='large'\r\n\t\t\t\t\tas='a'\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tmarginBottom: '1.5rem',\r\n\t\t\t\t\t\tcolor: '#14872f',\r\n\t\t\t\t\t\tborderColor: '#14872f'\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\tWhat is asymmetric encryption?\r\n\t\t\t\t</Label>\r\n\t\t\t</span>\r\n\t\t</BasicTooltip>\r\n\t);\r\n};\r\n\r\nexport default AsymmetricTooltip;\r\n","import React, { useContext, useState } from 'react';\r\nimport { Tab, Message, Label, Icon } from 'semantic-ui-react';\r\nimport RsaEncryption from '../RsaEncryption';\r\nimport RsaDecryption from '../RsaDecryption';\r\nimport RsaSigning from '../RsaSigning';\r\nimport RsaVerifying from '../RsaVerifying';\r\nimport AsymmetricTooltip from '../Tooltips/AsymmetricTooltip';\r\n\r\nimport { SelectedKeyContext } from '../../context/selected-key-context';\r\n\r\nconst AsymmetricSubpage = () => {\r\n\tconst [mdData, setMdData] = useState();\r\n\r\n\tconst { selectedKey } = useContext(SelectedKeyContext);\r\n\r\n\tconst AsymmetricOptions = [\r\n\t\t{\r\n\t\t\tmenuItem: 'RSA Encryption',\r\n\t\t\trender: () => (\r\n\t\t\t\t<Tab.Pane>\r\n\t\t\t\t\t{!selectedKey.PublicKey ? (\r\n\t\t\t\t\t\t<Message\r\n\t\t\t\t\t\t\twarning\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\tmargin: '1.5rem',\r\n\t\t\t\t\t\t\t\tpadding: '1.5rem',\r\n\t\t\t\t\t\t\t\ttextAlign: 'center'\r\n\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t<h3>No valid key!</h3>\r\n\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\tSelect a valid <b>public key</b> from the list on the\r\n\t\t\t\t\t\t\t\tleft to encrypt using RSA.\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t</Message>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<RsaEncryption />\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Tab.Pane>\r\n\t\t\t)\r\n\t\t},\r\n\t\t{\r\n\t\t\tmenuItem: 'RSA Decryption',\r\n\t\t\trender: () => (\r\n\t\t\t\t<Tab.Pane>\r\n\t\t\t\t\t{!selectedKey.PrivateKey ? (\r\n\t\t\t\t\t\t<Message\r\n\t\t\t\t\t\t\twarning\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\tmargin: '1.5rem',\r\n\t\t\t\t\t\t\t\tpadding: '1.5rem',\r\n\t\t\t\t\t\t\t\ttextAlign: 'center'\r\n\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t<h3>No valid key!</h3>\r\n\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\tSelect a valid <b>private key</b> from the list on the\r\n\t\t\t\t\t\t\t\tleft to decrypt using RSA.\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t</Message>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<RsaDecryption />\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Tab.Pane>\r\n\t\t\t)\r\n\t\t},\r\n\t\t{\r\n\t\t\tmenuItem: 'RSA Signing',\r\n\t\t\trender: () => (\r\n\t\t\t\t<Tab.Pane>\r\n\t\t\t\t\t{!selectedKey.PrivateKey ? (\r\n\t\t\t\t\t\t<Message\r\n\t\t\t\t\t\t\twarning\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\tmargin: '1.5rem',\r\n\t\t\t\t\t\t\t\tpadding: '1.5rem',\r\n\t\t\t\t\t\t\t\ttextAlign: 'center'\r\n\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t<h3>No valid key!</h3>\r\n\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\tSelect a valid <b>private key</b> from the list on the\r\n\t\t\t\t\t\t\t\tleft to sign using RSA.\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t</Message>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<RsaSigning setMdData={setMdData} />\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Tab.Pane>\r\n\t\t\t)\r\n\t\t},\r\n\t\t{\r\n\t\t\tmenuItem: 'RSA Verifying',\r\n\t\t\trender: () => (\r\n\t\t\t\t<Tab.Pane>\r\n\t\t\t\t\t{!selectedKey.PublicKey ? (\r\n\t\t\t\t\t\t<Message\r\n\t\t\t\t\t\t\twarning\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\tmargin: '1.5rem',\r\n\t\t\t\t\t\t\t\tpadding: '1.5rem',\r\n\t\t\t\t\t\t\t\ttextAlign: 'center'\r\n\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t<h3>No valid key!</h3>\r\n\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\tSelect a valid <b>public key</b> from the list on the\r\n\t\t\t\t\t\t\t\tleft to verify using RSA.\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t</Message>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<RsaVerifying mdData={mdData} />\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Tab.Pane>\r\n\t\t\t)\r\n\t\t}\r\n\t];\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<AsymmetricTooltip />\r\n\t\t\t<Tab panes={AsymmetricOptions} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default AsymmetricSubpage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Form } from 'semantic-ui-react';\r\nimport EncryptionTooltip from './Tooltips/EncryptionTooltip';\r\n\r\nvar forge = require('node-forge');\r\n\r\nconst AesEncryption = () => {\r\n\tconst [userInput, setUserInput] = useState('');\r\n\tconst [aesEncrypted, setAesEncrypted] = useState('');\r\n\tconst [userPassword, setUserPassword] = useState('');\r\n\r\n\tuseEffect(() => {\r\n\t\tconst encrypt = () => {\r\n\t\t\tlet exampleString = userInput;\r\n\r\n\t\t\t// the password used for derviation of a key, assign your password here\r\n\t\t\t// if none is assigned a random one is generated\r\n\t\t\tlet password = userPassword;\r\n\t\t\tif (password === '' || userInput === '') {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet salt = 'this is my salt';\r\n\t\t\tlet key = forge.pkcs5.pbkdf2(password, salt, 300, 32);\r\n\r\n\t\t\tlet iv = 'this is my vector';\r\n\r\n\t\t\t// ENCRYPT the text\r\n\t\t\tlet cipher = forge.cipher.createCipher('AES-CBC', key);\r\n\t\t\tcipher.start({ iv: iv });\r\n\t\t\tcipher.update(forge.util.createBuffer(exampleString));\r\n\t\t\tcipher.finish();\r\n\r\n\t\t\tlet encrypted = forge.util.encode64(cipher.output.data);\r\n\r\n\t\t\tsetAesEncrypted(encrypted);\r\n\t\t};\r\n\r\n\t\tencrypt();\r\n\t}, [userInput, userPassword]);\r\n\r\n\treturn (\r\n\t\t<div style={{ margin: '1.5rem' }}>\r\n\t\t\t<EncryptionTooltip />\r\n\t\t\t<p>\r\n\t\t\t\tWrite plain text in the first area and it will be encrypted using\r\n\t\t\t\tthe AES algorithm and your chosen password.\r\n\t\t\t</p>\r\n\r\n\t\t\t<Form>\r\n\t\t\t\t<Form.Input\r\n\t\t\t\t\tlabel='Enter your password here:'\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tflucid='true'\r\n\t\t\t\t\tonChange={e => setUserPassword(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.TextArea\r\n\t\t\t\t\tplaceholder='Write or paste your text here...'\r\n\t\t\t\t\tstyle={{ minHeight: 100 }}\r\n\t\t\t\t\tonChange={e => setUserInput(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.TextArea\r\n\t\t\t\t\treadOnly\r\n\t\t\t\t\tplaceholder='Ecrypted text appears here...'\r\n\t\t\t\t\tvalue={aesEncrypted}\r\n\t\t\t\t\tstyle={{ minHeight: 100 }}\r\n\t\t\t\t/>\r\n\t\t\t</Form>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default AesEncryption;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Form } from 'semantic-ui-react';\r\nimport DecryptionTooltip from './Tooltips/DecryptionTooltip';\r\n\r\nvar forge = require('node-forge');\r\n\r\nconst AesDecryption = () => {\r\n\tconst [userInput, setUserInput] = useState('');\r\n\tconst [aesDecrypted, setAesDecrypted] = useState('');\r\n\tconst [userPassword, setUserPassword] = useState('');\r\n\r\n\tuseEffect(() => {\r\n\t\tconst encrypt = () => {\r\n\t\t\tlet exampleString = userInput;\r\n\r\n\t\t\t// the password used for derviation of a key, assign your password here\r\n\t\t\t// if none is assigned a random one is generated\r\n\t\t\tlet password = userPassword;\r\n\t\t\tif (password === '') {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// derive key with password and salt\r\n\t\t\t// keylength adheres to the \"ECRYPT-CSA Recommendations\" on \"www.keylength.com\"\r\n\t\t\tlet salt = 'this is my salt';\r\n\t\t\tlet key = forge.pkcs5.pbkdf2(password, salt, 300, 32);\r\n\r\n\t\t\t// generate a random initialization Vector\r\n\t\t\tlet iv = 'this is my vector';\r\n\r\n\t\t\t// ENCRYPT the text\r\n\t\t\tlet cipher = forge.cipher.createCipher('AES-CBC', key);\r\n\r\n\t\t\t// DECRYPT the text\r\n\t\t\tlet tag = cipher.mode.tag;\r\n\t\t\tlet decipher = forge.cipher.createDecipher('AES-CBC', key);\r\n\t\t\tdecipher.start({\r\n\t\t\t\tiv: iv,\r\n\t\t\t\ttag: tag\r\n\t\t\t});\r\n\t\t\tdecipher.update(\r\n\t\t\t\tforge.util.createBuffer(forge.util.decode64(userInput))\r\n\t\t\t);\r\n\t\t\tdecipher.finish();\r\n\t\t\tlet decrypted = decipher.output.data;\r\n\r\n\t\t\tsetAesDecrypted(decrypted);\r\n\t\t};\r\n\r\n\t\tencrypt();\r\n\t}, [userInput, userPassword]);\r\n\r\n\treturn (\r\n\t\t<div style={{ margin: '1.5rem' }}>\r\n\t\t\t<DecryptionTooltip />\r\n\t\t\t<p>\r\n\t\t\t\tPaste in your decrypted data, write in the correct password and it\r\n\t\t\t\twill be decrypted using the AES algorithm.\r\n\t\t\t</p>\r\n\r\n\t\t\t<Form>\r\n\t\t\t\t<Form.Input\r\n\t\t\t\t\tlabel='Enter your password here:'\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tflucid\r\n\t\t\t\t\tonChange={e => setUserPassword(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.TextArea\r\n\t\t\t\t\tplaceholder='Write or paste your text here...'\r\n\t\t\t\t\tstyle={{ minHeight: 100 }}\r\n\t\t\t\t\tonChange={e => setUserInput(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.TextArea\r\n\t\t\t\t\treadOnly\r\n\t\t\t\t\tplaceholder='Ecrypted text appears here...'\r\n\t\t\t\t\tvalue={aesDecrypted}\r\n\t\t\t\t\tstyle={{ minHeight: 100 }}\r\n\t\t\t\t/>\r\n\t\t\t</Form>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default AesDecryption;\r\n","import React from 'react';\r\nimport { Label } from 'semantic-ui-react';\r\nimport { BasicTooltip } from './TooltipSchemas';\r\n\r\nconst RotTooltip = () => {\r\n\treturn (\r\n\t\t<BasicTooltip\r\n\t\t\tcontent={\r\n\t\t\t\t<div\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\ttextAlign: 'center',\r\n\t\t\t\t\t\tpadding: '1rem'\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t<b>ROT13</b> (\"rotate by 13 places\", sometimes hyphenated\r\n\t\t\t\t\t\tROT-13) is a simple letter substitution cipher that replaces a\r\n\t\t\t\t\t\tletter with the 13th letter after it, in the alphabet.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tROT13 is a special case of the <b>Caesar cipher</b> which was\r\n\t\t\t\t\t\tdeveloped in ancient Rome.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t}>\r\n\t\t\t<span>\r\n\t\t\t\t<Label\r\n\t\t\t\t\tbasic\r\n\t\t\t\t\tsize='large'\r\n\t\t\t\t\tas='a'\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tmarginBottom: '1.5rem',\r\n\t\t\t\t\t\tcolor: '#14872f',\r\n\t\t\t\t\t\tborderColor: '#14872f'\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\tWhat is ROT13?\r\n\t\t\t\t</Label>\r\n\t\t\t</span>\r\n\t\t</BasicTooltip>\r\n\t);\r\n};\r\n\r\nexport default RotTooltip;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Form } from 'semantic-ui-react';\r\nimport RotTooltip from './Tooltips/RotTooltip';\r\n\r\nconst Rot13 = () => {\r\n\tconst [userInput, setUserInput] = useState('');\r\n\tconst [rotData, setRotData] = useState('');\r\n\r\n\t// useEffect runs every time userInput changes\r\n\tuseEffect(() => {\r\n\t\tconst newRotData = userInput.replace(/[a-zA-Z]/g, function (char) {\r\n\t\t\treturn String.fromCharCode(\r\n\t\t\t\t(char <= 'Z' ? 90 : 122) >= (char = char.charCodeAt(0) + 13)\r\n\t\t\t\t\t? char\r\n\t\t\t\t\t: char - 26\r\n\t\t\t);\r\n\t\t});\r\n\t\tsetRotData(newRotData);\r\n\t}, [userInput]);\r\n\r\n\treturn (\r\n\t\t<div style={{ margin: '1.5rem' }}>\r\n\t\t\t<RotTooltip />\r\n\t\t\t<p>Simple conversion of plain text to ROT13 text.</p>\r\n\t\t\t<Form>\r\n\t\t\t\t<Form.TextArea\r\n\t\t\t\t\tplaceholder='Write your text here...'\r\n\t\t\t\t\tstyle={{ minHeight: 100 }}\r\n\t\t\t\t\tonChange={e => setUserInput(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.TextArea\r\n\t\t\t\t\treadOnly\r\n\t\t\t\t\tplaceholder='Cipher appears here...'\r\n\t\t\t\t\tvalue={rotData}\r\n\t\t\t\t\tstyle={{ minHeight: 100 }}\r\n\t\t\t\t/>\r\n\t\t\t</Form>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Rot13;\r\n","import React from 'react';\r\nimport { Label } from 'semantic-ui-react';\r\nimport { BasicTooltip } from './TooltipSchemas';\r\n\r\nconst SymmetricTooltip = () => {\r\n\treturn (\r\n\t\t<BasicTooltip\r\n\t\t\tcontent={\r\n\t\t\t\t<div\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\ttextAlign: 'center',\r\n\t\t\t\t\t\tpadding: '1rem'\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t<b>Symmetric Encryption</b> is a type of encryption where only\r\n\t\t\t\t\t\tone key (a <b>secret key</b> or <b>password</b>) is used to\r\n\t\t\t\t\t\tboth encrypt and decrypt information.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tThe entities communicating via <b>symmetric encryption</b>{' '}\r\n\t\t\t\t\t\tmust exchange the key or password so that it can be used in\r\n\t\t\t\t\t\tthe decryption process.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t}>\r\n\t\t\t<span>\r\n\t\t\t\t<Label\r\n\t\t\t\t\tbasic\r\n\t\t\t\t\tsize='large'\r\n\t\t\t\t\tas='a'\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tmarginBottom: '1.5rem',\r\n\t\t\t\t\t\tcolor: '#14872f',\r\n\t\t\t\t\t\tborderColor: '#14872f'\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\tWhat is symmetric encryption?\r\n\t\t\t\t</Label>\r\n\t\t\t</span>\r\n\t\t</BasicTooltip>\r\n\t);\r\n};\r\n\r\nexport default SymmetricTooltip;\r\n","import React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport AesEncryption from '../AesEncryption';\r\nimport AesDecryption from '../AesDecryption';\r\nimport Rot13 from '../Rot13';\r\nimport SymmetricTooltip from '../Tooltips/SymmetricTooltip';\r\n\r\nconst SymmetricSubpage = () => {\r\n\tconst SymmetricOptions = [\r\n\t\t{\r\n\t\t\tmenuItem: 'AES Encryption',\r\n\t\t\trender: () => (\r\n\t\t\t\t<Tab.Pane>\r\n\t\t\t\t\t<AesEncryption />\r\n\t\t\t\t</Tab.Pane>\r\n\t\t\t)\r\n\t\t},\r\n\t\t{\r\n\t\t\tmenuItem: 'AES Decryption',\r\n\t\t\trender: () => (\r\n\t\t\t\t<Tab.Pane>\r\n\t\t\t\t\t<AesDecryption />\r\n\t\t\t\t</Tab.Pane>\r\n\t\t\t)\r\n\t\t},\r\n\t\t{\r\n\t\t\tmenuItem: 'ROT13',\r\n\t\t\trender: () => (\r\n\t\t\t\t<Tab.Pane>\r\n\t\t\t\t\t<Rot13 />\r\n\t\t\t\t</Tab.Pane>\r\n\t\t\t)\r\n\t\t}\r\n\t];\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<SymmetricTooltip />\r\n\t\t\t<Tab panes={SymmetricOptions} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SymmetricSubpage;\r\n","import React from 'react';\r\nimport { Label } from 'semantic-ui-react';\r\nimport { BasicTooltip } from './TooltipSchemas';\r\n\r\nconst Base64Tooltip = () => {\r\n\treturn (\r\n\t\t<BasicTooltip\r\n\t\t\tcontent={\r\n\t\t\t\t<div\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\ttextAlign: 'center',\r\n\t\t\t\t\t\tpadding: '1rem'\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t<b>Base64</b> is an encoding and decoding technique used to\r\n\t\t\t\t\t\tconvert binary data to an American Standard for Information\r\n\t\t\t\t\t\tInterchange (ASCII) text format, and vice versa.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t}>\r\n\t\t\t<span>\r\n\t\t\t\t<Label\r\n\t\t\t\t\tbasic\r\n\t\t\t\t\tsize='large'\r\n\t\t\t\t\tas='a'\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tmarginBottom: '1.5rem',\r\n\t\t\t\t\t\tcolor: '#14872f',\r\n\t\t\t\t\t\tborderColor: '#14872f'\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\tWhat is Base64?\r\n\t\t\t\t</Label>\r\n\t\t\t</span>\r\n\t\t</BasicTooltip>\r\n\t);\r\n};\r\n\r\nexport default Base64Tooltip;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Form } from 'semantic-ui-react';\r\nimport Base64Tooltip from './Tooltips/Base64Tooltip';\r\n\r\nvar forge = require('node-forge');\r\n\r\nconst Base64Encoding = () => {\r\n\tconst [userInput, setUserInput] = useState('');\r\n\tconst [base64Encoded, setBase64Encoded] = useState('');\r\n\r\n\tuseEffect(() => {\r\n\t\tconst newBase64Encoded = forge.util.encode64(userInput);\r\n\t\tsetBase64Encoded(newBase64Encoded);\r\n\t}, [userInput]);\r\n\r\n\treturn (\r\n\t\t<div style={{ margin: '1.5rem' }}>\r\n\t\t\t<Base64Tooltip />\r\n\t\t\t<p>\r\n\t\t\t\tWrite plain text in the first area and it will automatically be\r\n\t\t\t\tencoded into Base64.\r\n\t\t\t</p>\r\n\t\t\t<Form>\r\n\t\t\t\t<Form.TextArea\r\n\t\t\t\t\tplaceholder='Write or paste your text here...'\r\n\t\t\t\t\tstyle={{ minHeight: 100 }}\r\n\t\t\t\t\tonChange={e => setUserInput(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.TextArea\r\n\t\t\t\t\treadOnly\r\n\t\t\t\t\tplaceholder='Encoded text appears here...'\r\n\t\t\t\t\tvalue={base64Encoded}\r\n\t\t\t\t\tstyle={{ minHeight: 100 }}\r\n\t\t\t\t/>\r\n\t\t\t</Form>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Base64Encoding;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Form } from 'semantic-ui-react';\r\nimport Base64Tooltip from './Tooltips/Base64Tooltip';\r\n\r\nvar forge = require('node-forge');\r\n\r\nconst Base64Decoding = () => {\r\n\tconst [userInput, setUserInput] = useState('');\r\n\tconst [base64Decoded, setBase64Decoded] = useState('');\r\n\r\n\tuseEffect(() => {\r\n\t\tconst newBase64Decoded = forge.util.decode64(userInput);\r\n\t\tsetBase64Decoded(newBase64Decoded);\r\n\t}, [userInput]);\r\n\r\n\treturn (\r\n\t\t<div style={{ margin: '1.5rem' }}>\r\n\t\t\t<Base64Tooltip />\r\n\t\t\t<p>\r\n\t\t\t\tPaste in your Base64 encoded text in the first field and it will be\r\n\t\t\t\tautomatically decoded.\r\n\t\t\t</p>\r\n\t\t\t<Form>\r\n\t\t\t\t<Form.TextArea\r\n\t\t\t\t\tplaceholder='Write or paste your text here...'\r\n\t\t\t\t\tstyle={{ minHeight: 100 }}\r\n\t\t\t\t\tonChange={e => setUserInput(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.TextArea\r\n\t\t\t\t\treadOnly\r\n\t\t\t\t\tplaceholder='Encoded text appears here...'\r\n\t\t\t\t\tvalue={base64Decoded}\r\n\t\t\t\t\tstyle={{ minHeight: 100 }}\r\n\t\t\t\t/>\r\n\t\t\t</Form>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Base64Decoding;\r\n","import React from 'react';\r\nimport { Label } from 'semantic-ui-react';\r\nimport { BasicTooltip } from './TooltipSchemas';\r\n\r\nconst UuidTooltip = () => {\r\n\treturn (\r\n\t\t<BasicTooltip\r\n\t\t\tcontent={\r\n\t\t\t\t<div\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\ttextAlign: 'center',\r\n\t\t\t\t\t\tpadding: '1rem'\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tA <b>universally unique identifier</b> (UUID) is a 128-bit\r\n\t\t\t\t\t\tnumber used to identify information in computer systems.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tWhile the probability that a UUID will be duplicated is not\r\n\t\t\t\t\t\tzero, it is close enough to zero to be negligible.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t}>\r\n\t\t\t<span>\r\n\t\t\t\t<Label\r\n\t\t\t\t\tbasic\r\n\t\t\t\t\tsize='large'\r\n\t\t\t\t\tas='a'\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tmarginBottom: '1.5rem',\r\n\t\t\t\t\t\tcolor: '#14872f',\r\n\t\t\t\t\t\tborderColor: '#14872f'\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\tWhat is a UUID?\r\n\t\t\t\t</Label>\r\n\t\t\t</span>\r\n\t\t</BasicTooltip>\r\n\t);\r\n};\r\n\r\nexport default UuidTooltip;\r\n","import React, { useState } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Form, List, Message, Icon } from 'semantic-ui-react';\r\nimport UuidTooltip from './Tooltips/UuidTooltip';\r\n\r\nconst UuidGenerator = () => {\r\n\tconst [generatedUuids, setGeneratedUuids] = useState([]);\r\n\tconst [number, setNumber] = useState(0);\r\n\tconst [errorMessage, setErrorMessage] = useState('');\r\n\r\n\tconst generateUuid = () => {\r\n\t\tsetErrorMessage('');\r\n\r\n\t\tconst uuids = [];\r\n\r\n\t\tif (number <= 0 || number > 50) {\r\n\t\t\tsetErrorMessage('Choose an amount between 1 and 50.');\r\n\t\t\tsetGeneratedUuids([]);\r\n\t\t\treturn;\r\n\t\t} else {\r\n\t\t\tlet index;\r\n\t\t\tlet uuidGen = '';\r\n\r\n\t\t\tfor (index = 0; index < number; index++) {\r\n\t\t\t\tuuidGen = uuid();\r\n\t\t\t\tuuids.push(uuidGen);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsetGeneratedUuids(uuids);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div style={{ margin: '1.5rem' }}>\r\n\t\t\t<UuidTooltip />\r\n\t\t\t<Form>\r\n\t\t\t\t<Form.Input\r\n\t\t\t\t\ttype='number'\r\n\t\t\t\t\tfluid\r\n\t\t\t\t\tplaceholder='Max 50'\r\n\t\t\t\t\tlabel='How many UUID do you want to generate?'\r\n\t\t\t\t\tfocus\r\n\t\t\t\t\tonChange={e => {\r\n\t\t\t\t\t\tsetNumber(e.target.value);\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.Button\r\n\t\t\t\t\ttype='button'\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tbackgroundColor: '#14872f'\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tonClick={generateUuid}>\r\n\t\t\t\t\t<p style={{ color: '#FFF' }}>Generate</p>\r\n\t\t\t\t</Form.Button>\r\n\t\t\t\t{errorMessage && (\r\n\t\t\t\t\t<Message error visible>\r\n\t\t\t\t\t\t<Icon color='red' name='times' size='large' />\r\n\t\t\t\t\t\t{errorMessage}\r\n\t\t\t\t\t</Message>\r\n\t\t\t\t)}\r\n\t\t\t\t<List style={{ marginTop: '2rem' }}>\r\n\t\t\t\t\t{generatedUuids.map(item => (\r\n\t\t\t\t\t\t<List.Item key={item}>{item}</List.Item>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</List>\r\n\t\t\t</Form>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default UuidGenerator;\r\n","import React from 'react';\r\nimport { Label } from 'semantic-ui-react';\r\nimport { BasicTooltip } from './TooltipSchemas';\r\n\r\nconst ChecksumTooltip = () => {\r\n\treturn (\r\n\t\t<BasicTooltip\r\n\t\t\tcontent={\r\n\t\t\t\t<div\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\ttextAlign: 'center',\r\n\t\t\t\t\t\tpadding: '1rem'\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tA <b>checksum</b> is a value used to verify the integrity of a\r\n\t\t\t\t\t\tfile or a data transfer. In other words, it is a sum that\r\n\t\t\t\t\t\tchecks the validity of data.\r\n\t\t\t\t\t</p>\r\n\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tTo produce a checksum, you run a program that puts that file\r\n\t\t\t\t\t\tthrough an algorithm. Typical algorithms used for this include{' '}\r\n\t\t\t\t\t\t<b>MD5</b>, <b>SHA-1</b>, <b>SHA-256</b>, and <b>SHA-512</b>.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t}>\r\n\t\t\t<span>\r\n\t\t\t\t<Label\r\n\t\t\t\t\tbasic\r\n\t\t\t\t\tsize='large'\r\n\t\t\t\t\tas='a'\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tmarginBottom: '1.5rem',\r\n\t\t\t\t\t\tcolor: '#14872f',\r\n\t\t\t\t\t\tborderColor: '#14872f'\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\tWhat is Checksum?\r\n\t\t\t\t</Label>\r\n\t\t\t</span>\r\n\t\t</BasicTooltip>\r\n\t);\r\n};\r\n\r\nexport default ChecksumTooltip;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Form } from 'semantic-ui-react';\r\nimport ChecksumTooltip from './Tooltips/ChecksumTooltip';\r\n\r\nvar forge = require('node-forge');\r\n\r\nconst Checksum = () => {\r\n\tconst [userInput, setUserInput] = useState('');\r\n\tconst [md5Hash, setMD5Hash] = useState('');\r\n\tconst [sha1Hash, setSHA1Hash] = useState('');\r\n\tconst [sha256Hash, setSHA256] = useState('');\r\n\tconst [sha512Hash, setSHA512] = useState('');\r\n\r\n\tconst uploadHandler = e => {\r\n\t\tconst reader = new FileReader();\r\n\r\n\t\treader.onload = function () {\r\n\t\t\tsetUserInput(reader.result);\r\n\t\t};\r\n\r\n\t\treader.readAsBinaryString(e.target.files[0]);\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tif (userInput === '') return;\r\n\r\n\t\tlet md5Hasher = forge.md.md5.create();\r\n\t\tmd5Hasher.update(userInput);\r\n\t\tsetMD5Hash(md5Hasher.digest().toHex());\r\n\r\n\t\tlet sha1Hasher = forge.md.sha1.create();\r\n\t\tsha1Hasher.update(userInput);\r\n\t\tsetSHA1Hash(sha1Hasher.digest().toHex());\r\n\r\n\t\tlet sha256Hasher = forge.md.sha256.create();\r\n\t\tsha256Hasher.update(userInput);\r\n\t\tsetSHA256(sha256Hasher.digest().toHex());\r\n\r\n\t\tlet sha512Hasher = forge.md.sha512.create();\r\n\t\tsha512Hasher.update(userInput);\r\n\t\tsetSHA512(sha512Hasher.digest().toHex());\r\n\t}, [userInput]);\r\n\r\n\treturn (\r\n\t\t<div style={{ margin: '1.5rem' }}>\r\n\t\t\t<ChecksumTooltip />\r\n\t\t\t<p>\r\n\t\t\t\tWrite or paste in plain text in the first area or choose a .txt file\r\n\t\t\t\tto generate hash values based on its content.\r\n\t\t\t</p>\r\n\t\t\t<Form>\r\n\t\t\t\t<Form.TextArea\r\n\t\t\t\t\tstyle={{ minHeight: 100 }}\r\n\t\t\t\t\tspellCheck={false}\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tlabel='Text to checksum:'\r\n\t\t\t\t\tvalue={userInput}\r\n\t\t\t\t\tonChange={e => {\r\n\t\t\t\t\t\tsetUserInput(e.target.value);\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.Input\r\n\t\t\t\t\ttype='file'\r\n\t\t\t\t\taccept='text/plain'\r\n\t\t\t\t\tonChange={uploadHandler}\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.Input spellCheck={false} value={md5Hash} label='MD5' />\r\n\t\t\t\t<Form.Input spellCheck={false} value={sha1Hash} label='SHA-1' />\r\n\t\t\t\t<Form.Input spellCheck={false} value={sha256Hash} label='SHA-256' />\r\n\t\t\t\t<Form.Input spellCheck={false} value={sha512Hash} label='SHA-512' />\r\n\t\t\t</Form>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Checksum;\r\n","import React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport Base64Encoding from '../Base64Encoding';\r\nimport Base64Decoding from '../Base64Decoding';\r\nimport UUIDGenerator from '../UUIDGenerator';\r\nimport Checksum from '../Checksum';\r\n\r\nconst UtilitiesSubpage = () => {\r\n\tconst UtilitiesOptions = [\r\n\t\t{\r\n\t\t\tmenuItem: 'Base64 Encoding',\r\n\t\t\trender: () => (\r\n\t\t\t\t<Tab.Pane>\r\n\t\t\t\t\t<Base64Encoding />\r\n\t\t\t\t</Tab.Pane>\r\n\t\t\t)\r\n\t\t},\r\n\t\t{\r\n\t\t\tmenuItem: 'Base64 Decoding',\r\n\t\t\trender: () => (\r\n\t\t\t\t<Tab.Pane>\r\n\t\t\t\t\t<Base64Decoding />\r\n\t\t\t\t</Tab.Pane>\r\n\t\t\t)\r\n\t\t},\r\n\t\t{\r\n\t\t\tmenuItem: 'UUID Generator',\r\n\t\t\trender: () => (\r\n\t\t\t\t<Tab.Pane>\r\n\t\t\t\t\t<UUIDGenerator />\r\n\t\t\t\t</Tab.Pane>\r\n\t\t\t)\r\n\t\t},\r\n\t\t{\r\n\t\t\tmenuItem: 'Checksum',\r\n\t\t\trender: () => (\r\n\t\t\t\t<Tab.Pane>\r\n\t\t\t\t\t<Checksum />\r\n\t\t\t\t</Tab.Pane>\r\n\t\t\t)\r\n\t\t}\r\n\t];\r\n\r\n\treturn <Tab panes={UtilitiesOptions} />;\r\n};\r\n\r\nexport default UtilitiesSubpage;\r\n","import React from 'react';\r\nimport { Grid, Tab } from 'semantic-ui-react';\r\nimport MyKeysList from '../MyKeysList';\r\nimport AsymmetricSubpage from './AsymmetricSubpage';\r\nimport SymmetricSubpage from './SymmetricSubpage';\r\nimport UtilitiesSubpage from './UtilitiesSubpage';\r\n\r\nconst ApplicationPage = () => {\r\n\tconst appSubpages = [\r\n\t\t{\r\n\t\t\tmenuItem: 'Asymmetric Encryption',\r\n\t\t\trender: () => (\r\n\t\t\t\t<Tab.Pane>\r\n\t\t\t\t\t<AsymmetricSubpage />\r\n\t\t\t\t</Tab.Pane>\r\n\t\t\t)\r\n\t\t},\r\n\t\t{\r\n\t\t\tmenuItem: 'Symmetric Encryption',\r\n\t\t\trender: () => (\r\n\t\t\t\t<Tab.Pane>\r\n\t\t\t\t\t<SymmetricSubpage />\r\n\t\t\t\t</Tab.Pane>\r\n\t\t\t)\r\n\t\t},\r\n\t\t{\r\n\t\t\tmenuItem: 'Utilities',\r\n\t\t\trender: () => (\r\n\t\t\t\t<Tab.Pane>\r\n\t\t\t\t\t<UtilitiesSubpage />\r\n\t\t\t\t</Tab.Pane>\r\n\t\t\t)\r\n\t\t}\r\n\t];\r\n\r\n\treturn (\r\n\t\t<div style={{ margin: '3rem' }}>\r\n\t\t\t<Grid stackable columns={2}>\r\n\t\t\t\t<Grid.Column width={3} style={{ minWidth: '400px' }}>\r\n\t\t\t\t\t<MyKeysList />\r\n\t\t\t\t</Grid.Column>\r\n\t\t\t\t<Grid.Column width={9} style={{ minWidth: '650px' }}>\r\n\t\t\t\t\t<Tab panes={appSubpages} />\r\n\t\t\t\t</Grid.Column>\r\n\t\t\t</Grid>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ApplicationPage;\r\n","import React, { useState, useContext } from 'react';\r\nimport {\r\n\tButton,\r\n\tForm,\r\n\tSegment,\r\n\tHeader,\r\n\tInput,\r\n\tMessage,\r\n\tIcon\r\n} from 'semantic-ui-react';\r\n\r\nconst forge = require('node-forge');\r\nconst pki = forge.pki;\r\n\r\nconst typeOptions = [\r\n\t{\r\n\t\tkey: 'rsa',\r\n\t\ttext: 'RSA',\r\n\t\tvalue: 'RSA'\r\n\t}\r\n];\r\n\r\nconst lengthOptions = [\r\n\t{\r\n\t\tkey: '512',\r\n\t\ttext: '512',\r\n\t\tvalue: '512'\r\n\t},\r\n\t{\r\n\t\tkey: '1024',\r\n\t\ttext: '1024',\r\n\t\tvalue: '1024'\r\n\t},\r\n\t{\r\n\t\tkey: '2048',\r\n\t\ttext: '2048',\r\n\t\tvalue: '2048'\r\n\t}\r\n];\r\n\r\nconst GenerateKey = ({ handleRefresh }) => {\r\n\tconst [keyName, setKeyName] = useState('');\r\n\tconst [keyType, setKeyType] = useState(typeOptions[0].value);\r\n\tconst [keyLength, setKeyLength] = useState(lengthOptions[1].value);\r\n\r\n\tconst [errorMessage, setErrorMessage] = useState('');\r\n\tconst [statusMessage, setStatusMessage] = useState('');\r\n\r\n\tconst [isLoading, setIsLoading] = useState(false);\r\n\r\n\tconst generateKey = () => {\r\n\t\tsetErrorMessage('');\r\n\t\tsetStatusMessage('');\r\n\r\n\t\t// Check if key name is empty\r\n\t\tif (keyName === '') {\r\n\t\t\treturn setErrorMessage('Name cannot be empty!');\r\n\t\t}\r\n\r\n\t\tconst keypair = pki.rsa.generateKeyPair({\r\n\t\t\tbits: keyLength,\r\n\t\t\te: 0x10001\r\n\t\t});\r\n\r\n\t\tconst pemPublicKey = pki.publicKeyToPem(keypair.publicKey);\r\n\t\tconst pemPrivateKey = pki.privateKeyToPem(keypair.privateKey);\r\n\r\n\t\t// TODO: generate key and push it to localStorage\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Segment style={{ maxWidth: 400, minWidth: 400, padding: '1.5rem' }}>\r\n\t\t\t<Header as='h2' dividing content='Generate a keypair' />\r\n\t\t\t<Form>\r\n\t\t\t\t<Form.Field>\r\n\t\t\t\t\t<p style={{ paddingBottom: '1rem' }}>\r\n\t\t\t\t\t\tCreate a new key with desired length to add to your list.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<Input\r\n\t\t\t\t\t\tid='keyname'\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tplaceholder='Key name'\r\n\t\t\t\t\t\tonChange={e => {\r\n\t\t\t\t\t\t\tsetKeyName(e.target.value);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Form.Field>\r\n\t\t\t\t<Form.Select\r\n\t\t\t\t\tlabel='Type'\r\n\t\t\t\t\tdefaultValue={typeOptions[0].value}\r\n\t\t\t\t\toptions={typeOptions}></Form.Select>\r\n\t\t\t\t<Form.Select\r\n\t\t\t\t\tlabel='Length'\r\n\t\t\t\t\toptions={lengthOptions}\r\n\t\t\t\t\tdefaultValue={lengthOptions[1].value}\r\n\t\t\t\t\tvalue={keyLength}\r\n\t\t\t\t\tonChange={(e, { value }) => setKeyLength(value)}></Form.Select>\r\n\r\n\t\t\t\t{isLoading ? (\r\n\t\t\t\t\t<Button onClick={generateKey} color='green' disabled>\r\n\t\t\t\t\t\tGenerate\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<Button onClick={generateKey} color='green'>\r\n\t\t\t\t\t\tGenerate\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t)}\r\n\r\n\t\t\t\t{errorMessage && (\r\n\t\t\t\t\t<Message error visible>\r\n\t\t\t\t\t\t<Icon color='red' name='times' size='large' />\r\n\t\t\t\t\t\t{errorMessage}\r\n\t\t\t\t\t</Message>\r\n\t\t\t\t)}\r\n\t\t\t\t{statusMessage && (\r\n\t\t\t\t\t<Message positive visible>\r\n\t\t\t\t\t\t<Icon color='green' name='checkmark' size='large' />\r\n\t\t\t\t\t\t{statusMessage}\r\n\t\t\t\t\t</Message>\r\n\t\t\t\t)}\r\n\t\t\t</Form>\r\n\t\t</Segment>\r\n\t);\r\n};\r\n\r\nexport default GenerateKey;\r\n","import React, { useContext, useState } from 'react';\r\nimport { Form, Grid, Header, Segment } from 'semantic-ui-react';\r\n\r\nimport MyKeysList from '../MyKeysList';\r\nimport GenerateKey from '../GenerateKey';\r\n\r\nimport { SelectedKeyContext } from '../../context/selected-key-context';\r\n\r\nconst KeysPage = () => {\r\n\tconst { selectedKey } = useContext(SelectedKeyContext);\r\n\tconst [refreshKeys, setRefreshKeys] = useState(false);\r\n\r\n\tconst handleRefresh = () => setRefreshKeys(!refreshKeys);\r\n\r\n\treturn (\r\n\t\t<div style={{ margin: '3rem' }}>\r\n\t\t\t<Grid stackable columns={3}>\r\n\t\t\t\t<Grid.Column width={3} style={{ minWidth: '400px' }}>\r\n\t\t\t\t\t<MyKeysList refreshKeys={refreshKeys} />\r\n\t\t\t\t</Grid.Column>\r\n\t\t\t\t<Grid.Column\r\n\t\t\t\t\twidth={7}\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tpaddingLeft: '1.5rem',\r\n\t\t\t\t\t\tpaddingRight: '1.5rem',\r\n\t\t\t\t\t\tminWidth: '200px'\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t<Segment style={{ padding: '1.5rem' }}>\r\n\t\t\t\t\t\t<Form>\r\n\t\t\t\t\t\t\t<Header as='h2' dividing>\r\n\t\t\t\t\t\t\t\t{selectedKey.Name ? selectedKey.Name : 'Select keypair'}\r\n\t\t\t\t\t\t\t</Header>\r\n\t\t\t\t\t\t\t<p style={{ paddingBottom: '1rem' }}>\r\n\t\t\t\t\t\t\t\tSelect a keypair from the list on the left to view its\r\n\t\t\t\t\t\t\t\tkeys.\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t<Form.TextArea\r\n\t\t\t\t\t\t\t\tspellCheck={false}\r\n\t\t\t\t\t\t\t\treadOnly\r\n\t\t\t\t\t\t\t\tvalue={selectedKey.PublicKey}\r\n\t\t\t\t\t\t\t\tlabel='Public Key:'\r\n\t\t\t\t\t\t\t\tplaceholder='Public Key'\r\n\t\t\t\t\t\t\t\tstyle={{ minHeight: 150 }}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<Form.TextArea\r\n\t\t\t\t\t\t\t\tspellCheck={false}\r\n\t\t\t\t\t\t\t\treadOnly\r\n\t\t\t\t\t\t\t\tvalue={selectedKey.PrivateKey}\r\n\t\t\t\t\t\t\t\tlabel='Private Key:'\r\n\t\t\t\t\t\t\t\tplaceholder='Private Key'\r\n\t\t\t\t\t\t\t\tstyle={{ minHeight: 150 }}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t</Segment>\r\n\t\t\t\t</Grid.Column>\r\n\t\t\t\t<Grid.Column width={3}>\r\n\t\t\t\t\t<GenerateKey handleRefresh={handleRefresh} />\r\n\t\t\t\t</Grid.Column>\r\n\t\t\t</Grid>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default KeysPage;\r\n","import React, { useState, useContext } from 'react';\r\nimport { Menu, Icon } from 'semantic-ui-react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\n\r\nimport logo from '../images/chestnut.png';\r\n\r\nconst Navbar = () => {\r\n\tconst [activeItem, setActiveItem] = useState('');\r\n\r\n\t// Highlights the clicked item on navbar\r\n\tconst handleItemClick = name => setActiveItem(name);\r\n\r\n\treturn (\r\n\t\t<Menu\r\n\t\t\tstackable\r\n\t\t\tinverted\r\n\t\t\tattached='top'\r\n\t\t\tstyle={{ backgroundColor: '#14872f' }}>\r\n\t\t\t<Menu.Item\r\n\t\t\t\tas={Link}\r\n\t\t\t\tto='/chestnut-offline'\r\n\t\t\t\tstyle={{ textAlign: 'center' }}>\r\n\t\t\t\t<img src={logo} alt='Chestnut Logo' />\r\n\t\t\t</Menu.Item>\r\n\t\t\t<Menu.Item\r\n\t\t\t\tas={NavLink}\r\n\t\t\t\tto='/chestnut-offline/application'\r\n\t\t\t\texact\r\n\t\t\t\tname='Home'\r\n\t\t\t\tactive={activeItem === 'Home'}\r\n\t\t\t\tonClick={handleItemClick}\r\n\t\t\t\tstyle={{ textAlign: 'center' }}>\r\n\t\t\t\t<Icon name='computer' style={{ marginRight: '.5rem' }} />\r\n\t\t\t\tApplication\r\n\t\t\t</Menu.Item>\r\n\t\t\t<Menu.Item\r\n\t\t\t\tas={NavLink}\r\n\t\t\t\tto='/chestnut-offline/keys'\r\n\t\t\t\tname='Keys'\r\n\t\t\t\tactive={activeItem === 'Keys'}\r\n\t\t\t\tonClick={handleItemClick}>\r\n\t\t\t\t<Icon name='key' style={{ marginRight: '.5rem' }} />\r\n\t\t\t\tManage Keys\r\n\t\t\t</Menu.Item>\r\n\t\t</Menu>\r\n\t);\r\n};\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\n\r\nfunction HomePage() {\r\n\treturn <div>Home Page!</div>;\r\n}\r\n\r\nexport default HomePage;\r\n","import React from 'react';\r\n\r\nfunction ErrorPage({ match }) {\r\n\tconsole.log(match);\r\n\r\n\treturn <div>Could not find: {match.params.queryParam}</div>;\r\n}\r\n\r\nexport default ErrorPage;\r\n","import React, { useState } from 'react';\r\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\r\nimport ApplicationPage from './components/Pages/ApplicationPage';\r\nimport KeysPage from './components/Pages/KeysPage';\r\nimport Navbar from './components/Navbar';\r\n\r\nimport { SelectedKeyContext } from './context/selected-key-context';\r\nimport HomePage from './components/Pages/HomePage';\r\nimport ErrorPage from './components/Pages/ErrorPage';\r\n\r\nconst App = () => {\r\n\t// Selected key state\r\n\tconst [selectedKey, setSelectedKey] = useState('');\r\n\tconst defaultSelectedKeyValues = { selectedKey, setSelectedKey };\r\n\r\n\treturn (\r\n\t\t// Initializing contexts with default values\r\n\t\t<SelectedKeyContext.Provider value={defaultSelectedKeyValues}>\r\n\t\t\t<BrowserRouter>\r\n\t\t\t\t<Navbar />\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route exact path='/chestnut-offline' component={HomePage} />\r\n\t\t\t\t\t<Route\r\n\t\t\t\t\t\texact\r\n\t\t\t\t\t\tpath='/chestnut-offline/application'\r\n\t\t\t\t\t\tcomponent={ApplicationPage}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Route\r\n\t\t\t\t\t\texact\r\n\t\t\t\t\t\tpath='/chestnut-offline/keys'\r\n\t\t\t\t\t\tcomponent={KeysPage}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Route\r\n\t\t\t\t\t\texact\r\n\t\t\t\t\t\tpath='/chestnut-offline/:queryParam'\r\n\t\t\t\t\t\tcomponent={ErrorPage}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Switch>\r\n\t\t\t</BrowserRouter>\r\n\t\t</SelectedKeyContext.Provider>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}